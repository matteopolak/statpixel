// 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

use serde::{Deserialize, Deserializer};

#[derive(Clone, Debug, Default, Deserialize)]
pub struct Inventory {
	#[serde(deserialize_with = "nested_items", rename = "i")]
	pub items: Vec<Option<Item>>,
}

#[derive(Clone, Debug)]
pub struct Item {
	pub id: String,
	pub count: u8,
}

#[derive(Deserialize)]
pub struct RawItem {
	#[serde(deserialize_with = "nested_id", rename = "tag", default)]
	pub id: Option<String>,
	#[serde(rename = "Count", default)]
	pub count: u8,
}

fn nested_id<'de, D>(deserializer: D) -> Result<Option<String>, D::Error>
where
	D: Deserializer<'de>,
{
	#[derive(Deserialize)]
	struct Tag {
		#[serde(rename = "ExtraAttributes")]
		extra: ExtraAttributes,
	}

	#[derive(Deserialize)]
	struct ExtraAttributes {
		id: String,
	}

	Option::<Tag>::deserialize(deserializer).map(|t| t.map(|t| t.extra.id))
}

fn nested_items<'de, D>(deserializer: D) -> Result<Vec<Option<Item>>, D::Error>
where
	D: Deserializer<'de>,
{
	let mut items = Vec::<RawItem>::deserialize(deserializer)?;

	// Move the first 9 items to be the last 9 items
	for _ in 0..9 {
		let item = items.remove(0);

		items.push(item);
	}

	Ok(items
		.into_iter()
		.map(|i| i.id.map(|id| Item { id, count: i.count }))
		.collect())
}
